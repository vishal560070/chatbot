# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UEzXdypEa1H40LbpLVQ97a6D1pFOWUy9
"""

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer 
nltk.download('popular', quiet=True)

import io
import random
import string # to process standard python strings
import warnings
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')

file=open('chatbot.txt','r',errors = 'ignore')
corpus=file.read()
corpus = corpus.lower()

print(corpus)

sent_tokens = nltk.sent_tokenize(corpus)# converts to list of sentences 
word_tokens = nltk.word_tokenize(corpus)# converts to list of words

from nltk.stem import LancasterStemmer
from nltk.stem.snowball import SnowballStemmer

englishStemmer=SnowballStemmer("english")
porter = PorterStemmer()
lancaster=LancasterStemmer()


def stemSentence(corpus, stemmer):
    token_words= nltk.word_tokenize(corpus)
    token_words
    stem_sentence=[]
    for word in token_words:
        stem_sentence.append(stemmer.stem(word))
        stem_sentence.append(" ")
    return "".join(stem_sentence)

clean_corpus = stemSentence(corpus, porter)

clean_corpus

"""# Vectorize step
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS
BoW_vectorizer = CountVectorizer(strip_accents='unicode',
                                 stop_words=None,
                                 ngram_range=(1,3),
                                 analyzer='word',
                                 min_df=.5,
                                 max_df=5.8)

#BoW_vectorizer.fit(list(fullSent['Phrase']))
#BoW_vectorizer.fit(list(train['Phrase']))
#vectorizer = CountVectorizer()
#>>> X = vectorizer.fit_transform(corpus)
#>>> print(vectorizer.get_feature_names())
#['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']
#>>> print(X.toarray()) 
BoW_vectorizer.fit_transform(list(clean_corpus.split('\n')))
#tf.fit_transform(smallcorp.split('\n'))
print(BoW_vectorizer.get_feature_names())

tfidf_vectorizer = TfidfVectorizer(min_df=.5,
                                   max_df=5,
                                   analyzer='word',
                                   strip_accents='unicode',
                                   ngram_range=(1,3),
                                   sublinear_tf=True,
                                   smooth_idf=True,
                                   use_idf=True,
                                   stop_words=None)

#tfidf_vectorizer.fit(list(fullSent['Phrase']))
tfidf_vectorizer.fit_transform(list(clean_corpus.split('\n')))
print(tfidf_vectorizer.get_feature_names())
"""

lemmer = nltk.stem.WordNetLemmatizer()

def LemTokens(tokens):
    return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

def LemNormalize(text):
    return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

GREETING_INPUTS = ("hello", "hi", "greetings", "what's up","hey",)
GREETING_RESPONSES = ["hi", "hey",  "hi there", "hello", "I am glad! You are talking to me"]
def greeting(sentence):
 
    for word in sentence.split():
        if word.lower() in GREETING_INPUTS:
            return random.choice(GREETING_RESPONSES)

def response(user_response):
    robo_response=''
    sent_tokens.append(user_response)
    TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
    tfidf = TfidfVec.fit_transform(sent_tokens)
    vals = cosine_similarity(tfidf[-1], tfidf)
    idx=vals.argsort()[0][-2]
    flat = vals.flatten()
    flat.sort()
    req_tfidf = flat[-2]
    if(req_tfidf==0):
        robo_response=robo_response+"I am sorry! I don't understand you"
        return robo_response
    else:
        robo_response = robo_response+sent_tokens[idx]
        return robo_response

flag=True
print("ROBO: My name is Robo. I will answer your queries. If you want to exit, type Bye!")
while(flag==True):
    user_response = input()
    user_response=user_response.lower()
    if(user_response!='bye'):
        if(user_response=='thanks' or user_response=='thank you' ):
            flag=False
            print("ROBO: You are welcome..")
        else:
            if(greeting(user_response)!=None):
                print("ROBO: "+greeting(user_response))
            else:
                print("ROBO: ",end="")
                print(response(user_response))
                sent_tokens.remove(user_response)
    else:
        flag=False
        print("ROBO: Bye! take care..")

